ConfigurationClassPostProcessor类源码详解

@Component @ComponentScan @PropertySource @Bean @Import @ImportResource


1.condition原理

实现condition接口,覆写matches方法,返回true则注解生效




@Conditional注解

满足条件,指定的类才会被扫描,才会被解析

@ConditionBean

@ImportResource  导入一个xml的配置文件,和我们解析xml文件一模一样,但是现在大都是注解,不咋用了

@ComponentScan注解不能扫描到所有的类,有一些类就没有 比如实现ImportSelector和实现BeanAware的接口

2.@Bean的实现原理

3.ImportBeanDefinitionRegistrar

4.@Configuration原理

满足单例的思想,不管你@Bean注解下返回多少同一类的对象,他都会返回同一个单例对象,通过BeanFactory.getBean()获取,
从缓存中获取,只有我们调用BeanFactory.getBean()方法才能拿到同一个对象,因为BeanFactory中是有一二三级缓存的,
当第一次调用getBean()从三级缓存中拿到BeanFactory.getObject()对象放入一级缓存,之后再获取对象都是从一级缓存中获取
获取的都是同一个对象

在@Configuration注解下类中的多个方法返回的同一类对象满足单例,是如何调用到BeanFactory.getBean()方法呢,通过代理对象
实现,cglib代理

如何识别@Configruation注解，当遍历class收集注解的时候,会对需要实例化的注解@Configuration注解所在类打上标记full
5.@Component和@Configuration区别





6.ImportBeanDefinitionRegistrar实战


Parser.parse（）
解析@Import @Propertysource @ComponentScan @Bean ImportSelector




