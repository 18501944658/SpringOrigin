spring的事务传播属性精讲

我们根据A方法的传播属性,决定是否将该传播属性给到被A方法调用的B方法,这就是事务的传播

----------------------------------------------------------------

@Transactional
public void transation(){
areaService.addArea();
goodsService.addGoods();
}

@Transactional
public void addArea(){

}

@Transactional
public void addGoods(){
]
}


伪代码执行事务逻辑:


Transation 方法执行开始:

Try{
   createTransactionIfNecessary  开启事务

           areaService.addArea();
           addArea方法执行开始
           Try{
             createTransactionIfNecessary  开启事务
             int i=areaService.addArea();
             return i;
           }catch(T e){
             事务回滚
             throw e;
           }

           commitTransactionAfterReturning  事务提交
           addArea方法执行结束;

           goodsService.addGoods();
           addGoods方法执行开始
           Try{
             createTransactionIfNecessary  开启事务
             int i=goodsService.addGoods();
             return i;
           }catch(T e){
            事务回滚
            throw e;
           }
            commitTransactionAfterReturning  事务提交
           addGoods方法执行结束;


}catch(T e){
   事务回滚

   throw e;
}
commitTransactionAfterReturning  事务提交
Transation方法执行结束;






--------------------------------------------------------------------------------------

事务传播属性在外层进行try catch 捕获异常, 内部方法进行抛出异常,内部rowback方法设置
doSetRollbackOnly(status);
/**设置回滚标识为true***/
txObject.setRollbackOnly();

即使在外部进行trycatch捕获异常,但是内部已经设置了回滚标识,即使外部捕获不进行throw异常,也会进行事务的回滚
所以因为设置了回滚标识,所以在我们进行事务提交的时候进行的就是rollback

@Transactional
public void transation(){
try{
areaService.addArea();
goodsService.addGoods();
}catch(T e){
e.printStackTrace();
}
}

---------------------------------------------------------------------------------------

@Transactional
public void transation(){

areaService.addArea();
goodsService.addGoods();

}


@Transactional
public void addArea(){
try{
逻辑
}catch(T e){
e.printStackTrace();
}
}
当在内层方法中加入trycatch不抛异常时,不会进行事务回滚

-----------------------------------------------------------------------------------------

1.REQUIRED传播属性

如果当前没有事务,就新建一个事务,如果已经存在一个事务中,加入到这个事务中.这是最常见的选择.

REQUIRED表示方法中是使用同一个事务,同一个连接,TransactionSynchronizationManager.getResource()
获取事务属性给开发人员看

ConnectionHolder resource=(ConnectionHolder)TransactionSynchronizationManager.getResource(dataSource);
resource.getConnection();

谁创建事务谁最后完成事务的提交


如果是你内层事务捕获到异常就不会回滚,外层事务捕获到异常依然会回滚




2.REQUIRES_NEW传播属性







3.NESTED传播属性