代理的生成和的链式调用流程

1.切面的排序


注解形式的排序
先按的注解排序,注解先是Around before after AfterReturning AfterThrowing,
注解顺序一直则在按自然顺序排序

自定义切面实现Advisor接口可以实现Orderd接口也可以在实现类上加注解@Order(数字)根据注解和实现的Orderd接口来排序

自定义切面和注解切面排序(整个排序是针对orderd接口和@Order注解的排序)
1.默认切面永远排第一
2.自定义切面根据实现的排序接口和排序注解排序
3.注解形式的切面排序,按原样返回（针对@Aspect注解形式的切面没有排序）

针对存在@Aspect注解切面,添加了一个默认的切面 DefaultPointCutAdvisor,解决参数传递问题的
在切面容器中在第一个位置又添加一个默认切面ExposeInvocationInterceptor.ADVISOR,这个切面就
做了一件事情,就是将methodInvocation丢到了ThreadLocal中,我们可以直接从ThreadLocal拿到参数,
@Aspect是链式调用,解决了参数传递问题,在注解方法中可以直接获取MethodInvocation

2.代理生成

被代理实例会存储到new SingletonTargetSource()对象中该类实现了TargetSource接口的对象中

@EnableAspectJAutoProxy(proTargetClass=true) 表示使用cglib的代理,现在我们的类都是没有接口实现的,所以我们必须使用cglib的代理,
通过反射创建代理实例,就算你设置为fasle没有实现代理的接口,也会使用cglib代理的
@EnableAspectJAutoProxy(proTargetClass=false) 表示使用JDK的代理

@EnableAspectJAutoProxy(proTargetClass=fasle,exposeProxy=true) 设置exposeProxy=true,如果使用JDK动态代理实现某接口的两个方法,A方法和的B方法,在A方法中调用了的B方法,我们使用切面在每个方法前
加入@Before方法进行前置增强,但是我们发现在调用A方法时切面增强,但是A方法内在调用B方法时没有前置增强,因为A方法和B方法的单独调用都是代理对象.方法()调用,而在A方法中调用B方法,则是this.B()的调用,即是
当前对象.B()的调用,不是代理对象调用的B方法,所有没有前置增强效果,对于这种情况Spring也给出了解决方法,即:

设置exposeProxy=true,并且对于this.B()的调用替换为((强转为被代理对象类型)(AopContext.currentProxy().B())方法的调用


在一个类中有多个方法,只有其中一个方法被@TranSactional注解修饰,所以该类需要生成代理对象,但是在调用@TranSactional修饰的方法的时候我们需要去先去调用切面增强,在去调用方法本身,而没有@TranSactional注解
修饰的方法,则只需要调用本身方法,即直接通过反射调用即可

--------------------------------------------------------------------------------------------------------------------------
SpringAop只作用于Bean,而AspectJ能够在编译期,类加载期对字节码进行更改.

--------------------------------------------------------------------------------------------------------------------
jdk的动态代理目标对象必须实现接口,代理类实现InvocationHandler接口覆写invoke方法,将代理增强功能写在invoke方法中,并调用被代理类方法,
通过Proxy.newProxyInstance（被代理接口类加载器,被代理类接口,实现Invocationhandler接口的类）;

也可以向下面匿名内部类的方式写:

IUserDao iud = (IUserDao) Proxy.newProxyInstance(ud.getClass().getClassLoader(), ud.getClass().getInterfaces(),
                new InvocationHandler() {

                    @Override
                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                        // TODO Auto-generated method stub

                        Object result = null;
                        if ("find".equals(method.getName())) {
                            result = method.invoke(ud, args);
                        } else {
                            System.out.println("开始JDK代理");
                            result = method.invoke(ud, args);
                            System.out.println("结束JDK代理");
                        }

                        return result;
                    }
                });

                JDK的动态代理也存在不足，即被代理类必须要有实现的接口，如没有接口则无法使用JDK动态代理（从newProxyInstance方法的第二个参数可得知，必须传入被代理类的实现接口），那么需要使用CGLib动态代理。

                CGLIB动态代理


                CGLib动态代理是一个第三方实现的动态代理类库，不要求被代理类必须实现接口，它采用的是继承被代理类，使用其子类的方式，弥补了被代理类没有接口的不足，

                要使用CGLib必须要引入第三方类库

                public class MyMethodInterceptor implements MethodInterceptor {

                    @Override
                    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {
                        // TODO Auto-generated method stub

                        System.out.println("开始CGLib动态代理");
                        Object object=proxy.invokeSuper(obj, args);
                        System.out.println("结束CGLib动态代理");
                        return object;
                    }

                }

                    public static void main(String[] args) {
                        // TODO Auto-generated method stub

                        Enhancer enhancer=new Enhancer();
                        enhancer.setSuperclass(UserDao.class);
                        enhancer.setCallback(new MyMethodInterceptor());
                        //生成代理类
                        UserDao ud=(UserDao) enhancer.create();
                        ud.save();
                        System.out.println("----------------");
                        ud.find();

                    }


----------------------------------------------------------------------------------------------
AopConfigUtils中auto-proxy creator的beanName为AUTO_PROXY_CREATOR_BEAN_NAME=org.springframework.aop.config.internalAutoProxyCreator
我们可以自己提前实例化这个Bean,在实现的BeanDefinitionRegistryPostProcessor接口中的类中提前实例化AnnotationAwareAspectJAutoProxyCreator为该bean的实例对象
bean.setInterceptorNames(beanName);

也可以实现BeanPostProcessor接口和PriorityOrder接口,覆写postProcessAfterInitialization方法,判断是否是AnnotationAwareAspectJAutoProxyCreator这个Bean对象,设置bean.setInterceptorNames(beanName);,并返回bean

bean.setInterceptorNames(beanName)是设置全局拦截器,设置的beanName所在的类必须实现MethodInterceptor接口,覆写invoke方法做全局的增强

-----------------------------------------------------------------------------------------
ProxyFactory = JdkDynamicAopProxy = 当前实例化的bean是一一对应的,每一个bean都有一个自己的ProxyFactory和自己JdkDynamicAopProxy
ProxyFactory 设置了所有当前bean的切面实例,ProxyFactory设置了实现targetSource接口的实例(其中包装了被代理实例)
--------------------------------------------------------------------------------------------



3.链式调用流程

